<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection"#>


<#
	//For full version with complete T4 features go to http://www.anasoft.net/apincore 

	//var tc = new TemplateCommon();
	//get list of entity classes to use as templates to create domain clases - For full version with complete T4 features go to http://www.anasoft.net/apincore
	//List<EnvDTE.CodeClass> entityClassesNotExistsinService = tc.GetClassesToCreate(false,"SQLEFTableNotification.Entity", "BaseEntity","SQLEFTableNotification.Domain", "GenericService","Service");

        List<string> entityClassesNotExistsinService = new List<string>{"Entity1","Entity2"};
#>
// —————————————— 
// <auto-generated> 
//
//                      For full version with complete T4 features go to http://www.anasoft.net/apincore
//
//			This code was auto-generated <#= DateTime.Now #>
// 			T4 template produces service class code if a class does not exist
//			NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using AutoMapper;
using SQLEFTableNotification.Entity;
using SQLEFTableNotification.Entity.UnitofWork;

namespace SQLEFTableNotification.Domain.Service
{
<#
	foreach(string cl in entityClassesNotExistsinService)
	{
	var entityName = cl;
#>
    /// <summary>
    /// A <#= entityName #> service
    /// </summary>

<#
   }
#>
}