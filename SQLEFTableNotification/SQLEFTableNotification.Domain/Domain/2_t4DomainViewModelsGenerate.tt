<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection"#>


<#
	//For full version with complete T4 features go to http://www.anasoft.net/apincore 

	//var tc = new TemplateCommon();
	//get list of entity classes to use as templates to create domain clases  - For full version with complete T4 features go to http://www.anasoft.net/apincore 
	//List<EnvDTE.CodeClass> entityClassesNotExistsinDomain = tc.GetClassesToCreate(false,"SQLEFTableNotification.Entity", "BaseEntity","SQLEFTableNotification.Domain", "BaseDomain","ViewModel");

        List<string> entityClassesNotExistsinDomain = new List<string>{"Entity1","Entity2"};
        List<string> props = new List<string>{"prop1","prop2"};

#>
// —————————————— 
// <auto-generated> 
//
//                      For full version with complete T4 features go to http://www.anasoft.net/apincore
//
//			This code was auto-generated <#= DateTime.Now #> 
//			NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
namespace SQLEFTableNotification.Domain
{
<#
	//create domain classes
	foreach(string cl in entityClassesNotExistsinDomain)
	{
	var entityName = cl;
	#>

    /// <summary>
    /// A <#= entityName #> view model
    /// </summary>
    public class <#= entityName #>ViewModel : BaseDomain
    {
	  <#
	        //var props = tc.GetAllProperties(cl);
		foreach(string prop in props)
		{
			var propn = prop;
			//EnvDTE.CodeTypeRef codeTypeRef = prop.Type;
			//var propt = codeTypeRef.AsString;
                        var propt = "string";
	  #>
		public <#= propt #> <#= propn #> { get; set; } 
	<#
	}
	#>
} 
	<#
	}
#>
     
}