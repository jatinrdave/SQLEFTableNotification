namespace SqlDbEntityNotifier.CodeGen.Models;

/// <summary>
/// Configuration options for code generation.
/// </summary>
public sealed class CodeGenOptions
{
    /// <summary>
    /// Gets or sets the output directory for generated code.
    /// </summary>
    public string OutputDirectory { get; set; } = "./Generated";

    /// <summary>
    /// Gets or sets the namespace for generated classes.
    /// </summary>
    public string Namespace { get; set; } = "Generated.DTOs";

    /// <summary>
    /// Gets or sets the naming convention for generated classes.
    /// </summary>
    public NamingConvention NamingConvention { get; set; } = NamingConvention.PascalCase;

    /// <summary>
    /// Gets or sets whether to generate nullable reference types.
    /// </summary>
    public bool GenerateNullableReferenceTypes { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to generate JSON serialization attributes.
    /// </summary>
    public bool GenerateJsonAttributes { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to generate data annotations.
    /// </summary>
    public bool GenerateDataAnnotations { get; set; } = true;

    /// <summary>
    /// Gets or sets the file header template.
    /// </summary>
    public string FileHeader { get; set; } = @"// <auto-generated>
// This code was generated by SQLDBEntityNotifier CodeGen
// Do not modify this file manually
// </auto-generated>";

    /// <summary>
    /// Gets or sets the database connection configuration.
    /// </summary>
    public DatabaseOptions Database { get; set; } = new();

    /// <summary>
    /// Gets or sets the table filtering configuration.
    /// </summary>
    public FilterOptions Filter { get; set; } = new();

    /// <summary>
    /// Gets or sets the code generation templates.
    /// </summary>
    public TemplateOptions Templates { get; set; } = new();

    /// <summary>
    /// Gets or sets whether to generate a project file.
    /// </summary>
    public bool GenerateProjectFile { get; set; } = true;
}

/// <summary>
/// Database configuration for code generation.
/// </summary>
public sealed class DatabaseOptions
{
    /// <summary>
    /// Gets or sets the database type.
    /// </summary>
    public DatabaseType Type { get; set; } = DatabaseType.Sqlite;

    /// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    public string ConnectionString { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the schema name (for databases that support schemas).
    /// </summary>
    public string Schema { get; set; } = "public";
}

/// <summary>
/// Database types supported for code generation.
/// </summary>
public enum DatabaseType
{
    /// <summary>
    /// SQLite database.
    /// </summary>
    Sqlite,

    /// <summary>
    /// PostgreSQL database.
    /// </summary>
    Postgres,

    /// <summary>
    /// SQL Server database.
    /// </summary>
    SqlServer
}

/// <summary>
/// Filtering options for code generation.
/// </summary>
public sealed class FilterOptions
{
    /// <summary>
    /// Gets or sets the list of tables to include (empty means all tables).
    /// </summary>
    public IList<string> IncludeTables { get; set; } = new List<string>();

    /// <summary>
    /// Gets or sets the list of tables to exclude.
    /// </summary>
    public IList<string> ExcludeTables { get; set; } = new List<string>();

    /// <summary>
    /// Gets or sets the list of columns to exclude from all tables.
    /// </summary>
    public IList<string> ExcludeColumns { get; set; } = new List<string>();

    /// <summary>
    /// Gets or sets whether to include system tables.
    /// </summary>
    public bool IncludeSystemTables { get; set; } = false;
}

/// <summary>
/// Template configuration for code generation.
/// </summary>
public sealed class TemplateOptions
{
    /// <summary>
    /// Gets or sets the DTO class template.
    /// </summary>
    public string DtoTemplate { get; set; } = @"
{FileHeader}

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace {Namespace};

/// <summary>
/// Data Transfer Object for {TableName} table.
/// </summary>
public sealed class {ClassName}
{
{Properties}
}";

    /// <summary>
    /// Gets or sets the property template.
    /// </summary>
    public string PropertyTemplate { get; set; } = @"
    /// <summary>
    /// Gets or sets the {ColumnName} column value.
    /// </summary>
    {Attributes}
    public {PropertyType} {PropertyName} {{ get; set; }}{NullableSuffix}";

    /// <summary>
    /// Gets or sets the JSON property name template.
    /// </summary>
    public string JsonPropertyTemplate { get; set; } = @"[JsonPropertyName(""{ColumnName}"")]";

    /// <summary>
    /// Gets or sets the required attribute template.
    /// </summary>
    public string RequiredAttributeTemplate { get; set; } = @"[Required]";

    /// <summary>
    /// Gets or sets the key attribute template.
    /// </summary>
    public string KeyAttributeTemplate { get; set; } = @"[Key]";

    /// <summary>
    /// Gets or sets whether to generate a project file.
    /// </summary>
    public bool GenerateProjectFile { get; set; } = true;
}

/// <summary>
/// Naming conventions for generated code.
/// </summary>
public enum NamingConvention
{
    /// <summary>
    /// PascalCase naming convention.
    /// </summary>
    PascalCase,

    /// <summary>
    /// camelCase naming convention.
    /// </summary>
    CamelCase,

    /// <summary>
    /// snake_case naming convention.
    /// </summary>
    SnakeCase
}